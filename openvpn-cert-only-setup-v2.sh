#!/usr/bin/env bash
# openvpn-cert-only-setup.sh
# OpenVPN server install (Certificate-Only auth), NO networking/firewall config.
# Minimal deps install: openvpn, easy-rsa, curl, ca-certificates

set -euo pipefail

# ---------------------- Script meta ----------------------
SCRIPT_VERSION="2.0-cert-min"
SCRIPT_DATE="2024-10-07"

# ---------------------- Constants/Paths ------------------
INSTANCE_NAME="server"                                 # fixed systemd instance + config filename
OPENVPN_DIR="/etc/openvpn"
SERVER_DIR="/etc/openvpn/server"
EASYRSA_DIR="/etc/openvpn/easy-rsa"
CLIENT_DIR="/etc/openvpn/clients"
LOG_DIR="/var/log/openvpn"
BACKUP_DIR="/etc/openvpn/backup"
SCRIPT_DIR="/usr/local/bin"

# Server config parameters (same defaults as before)
SERVER_NAME="server"
VPN_NETWORK="10.8.0.0"
VPN_NETMASK="255.255.255.0"
VPN_PORT="1194"
VPN_PROTOCOL="udp"

# Security/ciphers
AUTH="SHA512"
TLS_VERSION="1.2"

# OpenVPN runtime user/group
OPENVPN_SYSTEM_USER="openvpn"
OPENVPN_SYSTEM_GROUP="openvpn"

# ---------------------- Colors/Output --------------------
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'
PURPLE='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'
log(){ echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
error(){ echo -e "${RED}[ERROR] $1${NC}" >&2; }
warning(){ echo -e "${YELLOW}[WARNING] $1${NC}"; }
info(){ echo -e "${BLUE}[INFO] $1${NC}"; }
success(){ echo -e "${GREEN}[SUCCESS] $1${NC}"; }
header(){ echo -e "${PURPLE}================================${NC}\n${PURPLE}$1${NC}\n${PURPLE}================================${NC}"; }

# ---------------------- Checks ---------------------------
check_root(){ [[ $EUID -eq 0 ]] || { error "Run as root"; exit 1; } }

show_header(){
  header "OpenVPN Server Setup (Certificate-Only, No Networking)"
  echo -e "${CYAN}Authentication: Certificate Only (no user/password)${NC}"
  echo -e "${CYAN}Service model:  openvpn-server@${INSTANCE_NAME}${NC}"
  echo -e "${CYAN}Config file:    ${SERVER_DIR}/${INSTANCE_NAME}.conf${NC}"
  echo -e "${CYAN}Date:           ${SCRIPT_DATE} | Version: ${SCRIPT_VERSION}${NC}\n"
}

# ---------------------- Minimal deps ---------------------
update_system(){
  log "Installing required packages (minimal)â€¦"
  apt update
  DEBIAN_FRONTEND=noninteractive apt install -y \
    openvpn easy-rsa curl ca-certificates
  success "Minimal packages installed"
}

create_openvpn_user(){
  log "Ensuring OpenVPN system user (${OPENVPN_SYSTEM_USER}) exists..."
  getent group "$OPENVPN_SYSTEM_GROUP" >/dev/null 2>&1 || groupadd -r "$OPENVPN_SYSTEM_GROUP"
  if id -u "$OPENVPN_SYSTEM_USER" >/dev/null 2>&1; then
    info "User ${OPENVPN_SYSTEM_USER} already exists"
  else
    useradd -r -s /usr/sbin/nologin -g "$OPENVPN_SYSTEM_GROUP" "$OPENVPN_SYSTEM_USER"
    success "Created system user ${OPENVPN_SYSTEM_USER}"
  fi
}

# ---------------------- Easy-RSA / PKI -------------------
setup_easyrsa(){
  log "Setting up Easy-RSA PKI..."
  rm -rf "$EASYRSA_DIR"
  mkdir -p "$EASYRSA_DIR"
  cp -a /usr/share/easy-rsa/* "$EASYRSA_DIR"/
  cd "$EASYRSA_DIR"

  ./easyrsa init-pki

  # Keep certificate-only/no-passphrase behavior
  ./easyrsa --batch --req-cn="OpenVPN-CA" build-ca nopass
  ./easyrsa gen-dh
  openvpn --genkey --secret pki/ta.key
  ./easyrsa --batch --req-cn="OpenVPN-Server" build-server-full "$SERVER_NAME" nopass

  chmod 600 "pki/private/${SERVER_NAME}.key" || true
  chown root:root "pki/private/${SERVER_NAME}.key" || true
  chgrp "$OPENVPN_SYSTEM_GROUP" pki/ta.key || true
  chmod 600 pki/ta.key || true
  chmod 644 pki/ca.crt "pki/issued/${SERVER_NAME}.crt" || true

  [[ -f "pki/ca.crt" && -f "pki/issued/${SERVER_NAME}.crt" ]] \
    && success "PKI generated (CA and server certs)" \
    || { error "Easy-RSA failed to create required materials"; exit 1; }
}

# ---------------------- OpenVPN config -------------------
configure_openvpn(){
  log "Writing server configuration..."
  mkdir -p "$SERVER_DIR" "$CLIENT_DIR" "$LOG_DIR" "$BACKUP_DIR" /var/run/openvpn-tmp

  cat > "${SERVER_DIR}/${INSTANCE_NAME}.conf" <<EOF
# OpenVPN Server (Certificate-Only)
# Generated by openvpn-cert-only-setup.sh

port ${VPN_PORT}
proto ${VPN_PROTOCOL}
dev tun
topology subnet

ca ${EASYRSA_DIR}/pki/ca.crt
cert ${EASYRSA_DIR}/pki/issued/${SERVER_NAME}.crt
key ${EASYRSA_DIR}/pki/private/${SERVER_NAME}.key
dh ${EASYRSA_DIR}/pki/dh.pem
tls-crypt ${EASYRSA_DIR}/pki/ta.key

server ${VPN_NETWORK} ${VPN_NETMASK}
ifconfig-pool-persist ipp.txt

push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"

data-ciphers AES-256-GCM:AES-128-GCM
data-ciphers-fallback AES-256-GCM
auth ${AUTH}
tls-version-min ${TLS_VERSION}
remote-cert-tls client
tls-server

user ${OPENVPN_SYSTEM_USER}
group ${OPENVPN_SYSTEM_GROUP}
persist-tun
persist-key
tmp-dir /var/run/openvpn-tmp

log-append ${LOG_DIR}/openvpn.log
status ${LOG_DIR}/openvpn-status.log
status-version 2
verb 3
mute 20

keepalive 10 120
explicit-exit-notify 1
EOF

  touch "${LOG_DIR}/openvpn.log" "${LOG_DIR}/openvpn-status.log"
  chown -R "${OPENVPN_SYSTEM_USER}:${OPENVPN_SYSTEM_GROUP}" "${LOG_DIR}" || true
  chmod 755 "${LOG_DIR}"
  chown "${OPENVPN_SYSTEM_USER}:${OPENVPN_SYSTEM_GROUP}" /var/run/openvpn-tmp
  chmod 770 /var/run/openvpn-tmp

  success "Server config written to ${SERVER_DIR}/${INSTANCE_NAME}.conf"
}

# ---------------------- systemd service ------------------
configure_systemd(){
  log "Enabling and starting OpenVPN service (openvpn-server@${INSTANCE_NAME})..."
  systemctl enable "openvpn-server@${INSTANCE_NAME}"
  systemctl restart "openvpn-server@${INSTANCE_NAME}" || true
  sleep 2
  if systemctl is-active --quiet "openvpn-server@${INSTANCE_NAME}"; then
    success "OpenVPN service is running"
  else
    error "OpenVPN service failed to start"
    systemctl --no-pager --full status "openvpn-server@${INSTANCE_NAME}" || true
    exit 1
  fi
}

# ---------------------- Management script ----------------
create_management_script(){
  log "Creating management CLI: openvpn-manage"

  cat > "${SCRIPT_DIR}/openvpn-manage" <<'EOF'
#!/usr/bin/env bash
# openvpn-manage (Certificate-Only)
set -euo pipefail

INSTANCE_NAME="server"
OPENVPN_DIR="/etc/openvpn"
SERVER_DIR="/etc/openvpn/server"
EASYRSA_DIR="/etc/openvpn/easy-rsa"
CLIENT_DIR="/etc/openvpn/clients"
SERVER_NAME="server"

RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; PURPLE='\033[0;35m'; NC='\033[0m'
log(){ echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
error(){ echo -e "${RED}[ERROR] $1${NC}" >&2; }
success(){ echo -e "${GREEN}[SUCCESS] $1${NC}"; }

usage(){
  echo -e "${PURPLE}OpenVPN Management (Certificate-Only)${NC}"
  echo "Usage: $0 {add|remove|renew|list|status|backup|restart|logs} [username]"
}

add_user(){
  local u="${1:-}"
  [[ -n "$u" ]] || { error "Username required"; exit 1; }
  [[ -f "${EASYRSA_DIR}/pki/issued/${u}.crt" ]] && { error "User exists"; exit 1; }
  log "Creating client cert (nopass) for '$u'..."
  cd "$EASYRSA_DIR"
  ./easyrsa --batch --req-cn="$u" build-client-full "$u" nopass

  # Build inline .ovpn using server settings from server.conf
  local port proto rip
  port=$(awk '/^port[[:space:]]+/ {print $2; exit}' "${SERVER_DIR}/${INSTANCE_NAME}.conf")
  proto=$(awk '/^proto[[:space:]]+/ {print $2; exit}' "${SERVER_DIR}/${INSTANCE_NAME}.conf")
  rip=$(curl -s ifconfig.me || curl -s icanhazip.com || hostname -I | awk '{print $1}')

  mkdir -p "$CLIENT_DIR"
  cat > "${CLIENT_DIR}/${u}.ovpn" <<CLIENT_EOF
client
dev tun
proto ${proto}
remote ${rip} ${port}
resolv-retry infinite
nobind
persist-key
persist-tun
cipher AES-256-GCM
auth SHA512
verb 3
mute 20

<ca>
$(cat ${EASYRSA_DIR}/pki/ca.crt)
</ca>

<cert>
$(openssl x509 -in ${EASYRSA_DIR}/pki/issued/${u}.crt)
</cert>

<key>
$(cat ${EASYRSA_DIR}/pki/private/${u}.key)
</key>

<tls-crypt>
$(cat ${EASYRSA_DIR}/pki/ta.key)
</tls-crypt>
CLIENT_EOF
  chmod 600 "${CLIENT_DIR}/${u}.ovpn"
  success "Created ${CLIENT_DIR}/${u}.ovpn"
}

remove_user(){
  local u="${1:-}"
  [[ -n "$u" ]] || { error "Username required"; exit 1; }
  [[ -f "${EASYRSA_DIR}/pki/issued/${u}.crt" ]] || { error "User not found"; exit 1; }
  log "Revoking '$u'..."
  cd "$EASYRSA_DIR"
  ./easyrsa revoke "$u" || true
  ./easyrsa gen-crl
  install -m 0644 "${EASYRSA_DIR}/pki/crl.pem" "${SERVER_DIR}/crl.pem"
  systemctl restart "openvpn-server@${INSTANCE_NAME}"
  rm -f "${CLIENT_DIR}/${u}.ovpn}"
  success "Revoked ${u} and refreshed CRL"
}

renew_user(){
  local u="${1:-}"
  [[ -n "$u" ]] || { error "Username required"; exit 1; }
  [[ -f "${EASYRSA_DIR}/pki/issued/${u}.crt" ]] || { error "User not found"; exit 1; }
  log "Renewing '$u'..."
  cd "$EASYRSA_DIR"
  ./easyrsa revoke "$u" || true
  ./easyrsa --batch --req-cn="$u" build-client-full "$u" nopass
  ./easyrsa gen-crl
  install -m 0644 "${EASYRSA_DIR}/pki/crl.pem" "${SERVER_DIR}/crl.pem"
  systemctl restart "openvpn-server@${INSTANCE_NAME}"
  success "Renewed ${u}"
}

list_users(){
  cd "$EASYRSA_DIR"
  [[ -d "pki/issued" ]] || { echo "No users"; exit 0; }
  ls -1 pki/issued/*.crt 2>/dev/null | sed 's#.*/##; s/\.crt$//' | grep -v "^${SERVER_NAME}$" || echo "No users"
}

status_srv(){
  systemctl --no-pager --full status "openvpn-server@${INSTANCE_NAME}" || true
  echo
  [[ -f "/var/log/openvpn/openvpn-status.log" ]] && \
    awk -F, '/^CLIENT_LIST/ {c++} END{print "Connected clients:", (c+0)}' /var/log/openvpn/openvpn-status.log || echo "Connected clients: 0"
}

backup_cfg(){
  local ts; ts="$(date +%Y%m%d-%H%M%S)"
  local out="/etc/openvpn/backup/openvpn-backup-${ts}"
  mkdir -p "$out"
  cp -a "${EASYRSA_DIR}/pki" "$out/"
  cp -a "${SERVER_DIR}/${INSTANCE_NAME}.conf" "$out/"
  cp -a "${CLIENT_DIR}" "$out/" 2>/dev/null || true
  tar -czf "${out}.tar.gz" -C "/etc/openvpn/backup" "$(basename "$out")"
  rm -rf "$out"
  log "Backup at ${out}.tar.gz"
}

logs_tail(){
  [[ -f "/var/log/openvpn/openvpn.log" ]] && tail -n 40 /var/log/openvpn/openvpn.log || echo "No logs"
}

case "${1:-}" in
  add)    add_user "${2:-}";;
  remove) remove_user "${2:-}";;
  renew)  renew_user "${2:-}";;
  list)   list_users;;
  status) status_srv;;
  backup) backup_cfg;;
  restart) systemctl restart "openvpn-server@${INSTANCE_NAME}"; success "Restarted";;
  logs)   logs_tail;;
  *) usage; exit 1;;
esac
EOF

  chmod +x "${SCRIPT_DIR}/openvpn-manage"
  success "Created ${SCRIPT_DIR}/openvpn-manage"
}

# ---------------------- Status helper --------------------
create_status_script(){
  log "Creating status helper: openvpn-status"
  cat > "${SCRIPT_DIR}/openvpn-status" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'
echo -e "${BLUE}OpenVPN Server Status (Certificate-Only)${NC}"
echo "=============================================="
echo -e "\n${YELLOW}Service:${NC}"
systemctl status openvpn-server@server --no-pager || true
echo -e "\n${YELLOW}Connected Clients:${NC}"
if [[ -f "/var/log/openvpn/openvpn-status.log" ]]; then
  awk -F, '/^CLIENT_LIST/ {c++} END{print (c+0)}' /var/log/openvpn/openvpn-status.log
else
  echo "0"
fi
echo -e "\n${YELLOW}Server Info:${NC}"
echo "Server IP: $(curl -s ifconfig.me || curl -s icanhazip.com || hostname -I | awk '{print $1}')"
grep -E '^(port|proto|server )' /etc/openvpn/server/server.conf || true
echo -e "\n${YELLOW}Recent Logs:${NC}"
[[ -f "/var/log/openvpn/openvpn.log" ]] && tail -n 20 /var/log/openvpn/openvpn.log || echo "No logs"
EOF
  chmod +x "${SCRIPT_DIR}/openvpn-status"
  success "Created ${SCRIPT_DIR}/openvpn-status"
}

# ---------------------- Main install ---------------------
install_openvpn_server(){
  header "Starting OpenVPN Server Installation (Certificate-Only, No Networking)"
  check_root
  show_header
  update_system
  create_openvpn_user
  setup_easyrsa
  configure_openvpn
  configure_systemd
  create_management_script
  create_status_script

  header "Installation Completed"
  success "OpenVPN is running (certificate-only auth)."
  info "Config:   ${SERVER_DIR}/${INSTANCE_NAME}.conf"
  info "Manage:   openvpn-manage"
  info "Status:   openvpn-status"
  echo
  warning "Networking (NAT/forwarding) is NOT configured by this script."
  warning "Use your separate networking tool to enable internet access for VPN clients."
}

# ---------------------- Entrypoint -----------------------
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  case "${1:-install}" in
    install) install_openvpn_server ;;
    *) echo "Usage: $0 install"; exit 1 ;;
  esac
fi
