#!/usr/bin/env bash

set -euo pipefail
umask 027

# OpenVPN Server Setup - Secure Username/Password Authentication
# Best practices implementation with modern security standards
# Uses only username/password authentication (no client certificates)

SCRIPT_NAME=$(basename "$0")
VERSION="2.0.0"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

info() {
    echo -e "${PURPLE}ℹ️  $1${NC}"
}

# Configuration variables
OPENVPN_DIR="/etc/openvpn"
EASYRSA_DIR="/etc/openvpn/easy-rsa"
CLIENT_DIR="/etc/openvpn/clients"
LOG_DIR="/var/log/openvpn"
CONFIG_DIR="/etc/openvpn/config"
SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' 2>/dev/null || echo "YOUR_SERVER_IP")
VPN_NETWORK="10.8.0.0"
VPN_NETMASK="255.255.255.0"
VPN_PORT="1194"
VPN_PROTO="udp"
ECDH_CURVE="prime256v1"
MAX_CLIENTS="50"

# Security settings
FAIL2BAN_ENABLED=true
RATE_LIMIT_ENABLED=true
LOG_LEVEL="3"

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
}

# Check system requirements
check_system() {
    log "Checking system requirements..."
    
    # Check if running on supported OS
    if ! command -v apt &> /dev/null; then
        error "This script is designed for Debian/Ubuntu systems with apt package manager"
        exit 1
    fi
    
    # Check available memory
    local mem_gb=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$mem_gb" -lt 1 ]; then
        warning "System has less than 1GB RAM. OpenVPN may not perform optimally."
    fi
    
    # Check disk space
    local disk_gb=$(df / | awk 'NR==2{print int($4/1024/1024)}')
    if [ "$disk_gb" -lt 2 ]; then
        error "Insufficient disk space. At least 2GB required."
        exit 1
    fi
    
    success "System requirements check passed"
}

# Update system packages
update_system() {
    log "Updating system packages..."
    apt update -qq
    apt upgrade -y -qq
    success "System packages updated"
}

# Install required packages
install_packages() {
    log "Installing required packages..."
    
    local packages=(
        "openvpn"
        "easy-rsa"
        "curl"
        "wget"
        "unzip"
        "net-tools"
        "iptables-persistent"
        "netfilter-persistent"
        "fail2ban"
        "htop"
        "nano"
        "openssl"
        "ca-certificates"
    )
    
    for package in "${packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            apt install -y -qq "$package"
        fi
    done
    
    success "Required packages installed"
}

# Create directory structure
create_directories() {
    log "Creating directory structure..."
    
    local dirs=("$OPENVPN_DIR" "$CLIENT_DIR" "$LOG_DIR" "$EASYRSA_DIR" "$CONFIG_DIR")
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
        chmod 750 "$dir"
    done
    
    # Create auth file directory
    mkdir -p "$OPENVPN_DIR/auth"
    chmod 700 "$OPENVPN_DIR/auth"
    
    success "Directory structure created"
}

# Setup Easy-RSA v3 for server certificates only
setup_easyrsa() {
    log "Setting up Easy-RSA v3 for server certificates..."
    
    # Copy Easy-RSA from system location
    cp -r /usr/share/easy-rsa/* "$EASYRSA_DIR/"
    cd "$EASYRSA_DIR"
    
    # Configure Easy-RSA with modern settings
    cat > vars << EOF
set_var EASYRSA_ALGO "ec"
set_var EASYRSA_CURVE "${ECDH_CURVE}"
set_var EASYRSA_BATCH "1"
set_var EASYRSA_REQ_COUNTRY "US"
set_var EASYRSA_REQ_PROVINCE "California"
set_var EASYRSA_REQ_CITY "San Francisco"
set_var EASYRSA_REQ_ORG "OpenVPN-Server"
set_var EASYRSA_REQ_EMAIL "admin@openvpn.local"
set_var EASYRSA_REQ_OU "IT Department"
set_var EASYRSA_CA_EXPIRE 3650
set_var EASYRSA_CERT_EXPIRE 365
set_var EASYRSA_CRL_DAYS 30
EOF
    
    # Initialize PKI and generate server certificates only
    ./easyrsa init-pki
    ./easyrsa build-ca nopass
    ./easyrsa build-server-full server nopass
    ./easyrsa gen-dh
    openvpn --genkey secret ta.key
    
    # Generate CRL
    ./easyrsa gen-crl
    chmod 644 pki/crl.pem
    
    success "Easy-RSA setup completed"
}

# Generate secure server configuration
generate_server_config() {
    log "Generating OpenVPN server configuration..."
    
    cat > "$OPENVPN_DIR/server.conf" << EOF
# OpenVPN Server Configuration - Secure Username/Password Authentication
# Generated by $SCRIPT_NAME v$VERSION

# Basic Configuration
port $VPN_PORT
proto $VPN_PROTO
dev tun
topology subnet
server $VPN_NETWORK $VPN_NETMASK
ifconfig-pool-persist $OPENVPN_DIR/ipp.txt

# Client Configuration
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 1.1.1.1"
push "route $VPN_NETWORK $VPN_NETMASK"

# Modern Security Settings
cipher AES-256-GCM
auth SHA256
tls-version-min 1.2
tls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256
data-ciphers AES-256-GCM:AES-128-GCM
data-ciphers-fallback AES-256-CBC

# Certificate files (server only)
ca $OPENVPN_DIR/ca.crt
cert $OPENVPN_DIR/server.crt
key $OPENVPN_DIR/server.key
dh $OPENVPN_DIR/dh.pem
tls-crypt $OPENVPN_DIR/ta.key

# Username/Password Authentication
auth-user-pass-verify $OPENVPN_DIR/auth/verify.sh via-file
username-as-common-name
script-security 2

# CRL verification
crl-verify $EASYRSA_DIR/pki/crl.pem

# Logging
log $LOG_DIR/openvpn.log
log-append $LOG_DIR/openvpn.log
status $LOG_DIR/openvpn-status.log
status-version 2
verb $LOG_LEVEL

# Performance and Reliability
keepalive 10 120
persist-key
persist-tun
resolv-retry infinite

# Security
user nobody
group nogroup
writepid /run/openvpn/server.pid

# Client limits
max-clients $MAX_CLIENTS

# Additional Security
explicit-exit-notify 1
tls-auth $OPENVPN_DIR/ta.key 0
EOF
    
    success "Server configuration generated"
}

# Create authentication script
create_auth_script() {
    log "Creating authentication script..."
    
    cat > "$OPENVPN_DIR/auth/verify.sh" << 'EOF'
#!/bin/bash

# OpenVPN Username/Password Authentication Script
# This script verifies user credentials

set -euo pipefail

# Configuration
AUTH_FILE="/etc/openvpn/auth/users"
LOG_FILE="/var/log/openvpn/auth.log"

# Log authentication attempts
log_auth() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Read credentials from file
read -r username
read -r password

# Check if user exists and password is correct
if [ -f "$AUTH_FILE" ]; then
    if grep -q "^$username:" "$AUTH_FILE"; then
        stored_hash=$(grep "^$username:" "$AUTH_FILE" | cut -d: -f2)
        if [ -n "$stored_hash" ] && echo "$password" | openssl passwd -1 -stdin | grep -q "$stored_hash"; then
            log_auth "SUCCESS: $username authenticated"
            exit 0
        fi
    fi
fi

log_auth "FAILED: $username authentication failed"
exit 1
EOF
    
    chmod +x "$OPENVPN_DIR/auth/verify.sh"
    chmod 600 "$OPENVPN_DIR/auth/verify.sh"
    
    # Create empty users file
    touch "$OPENVPN_DIR/auth/users"
    chmod 600 "$OPENVPN_DIR/auth/users"
    
    success "Authentication script created"
}

# Copy server certificates
copy_certificates() {
    log "Copying server certificates..."
    
    cp "$EASYRSA_DIR/pki/ca.crt" "$OPENVPN_DIR/"
    cp "$EASYRSA_DIR/pki/issued/server.crt" "$OPENVPN_DIR/"
    cp "$EASYRSA_DIR/pki/private/server.key" "$OPENVPN_DIR/"
    cp "$EASYRSA_DIR/pki/dh.pem" "$OPENVPN_DIR/"
    cp "$EASYRSA_DIR/ta.key" "$OPENVPN_DIR/"
    
    # Set proper permissions
    chmod 600 "$OPENVPN_DIR"/*.key
    chmod 644 "$OPENVPN_DIR"/*.crt
    chmod 644 "$OPENVPN_DIR"/*.pem
    chmod 600 "$OPENVPN_DIR"/ta.key
    
    success "Server certificates copied"
}

# Enable IP forwarding
enable_ip_forwarding() {
    log "Enabling IP forwarding..."
    
    # Enable immediately
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # Make permanent
    if ! grep -q "net.ipv4.ip_forward = 1" /etc/sysctl.conf; then
        echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
    fi
    
    # Apply sysctl settings
    sysctl -p > /dev/null
    
    success "IP forwarding enabled"
}

# Configure firewall and NAT
configure_firewall() {
    log "Configuring firewall and NAT..."
    
    # Get the default interface
    WAN_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    
    if [ -z "$WAN_INTERFACE" ]; then
        error "Could not determine WAN interface"
        exit 1
    fi
    
    # Check if UFW is active
    if systemctl is-active --quiet ufw; then
        log "UFW is active, configuring UFW rules..."
        
        # Configure UFW rules for OpenVPN
        ufw allow $VPN_PORT/$VPN_PROTO comment "OpenVPN"
        ufw allow ssh comment "SSH"
        ufw allow out on tun+ comment "OpenVPN outbound"
        ufw allow in on tun+ comment "OpenVPN inbound"
        
        # Add NAT rules to UFW before.rules
        cat > /etc/ufw/before.rules << EOF
# OpenVPN NAT rules
*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s $VPN_NETWORK/24 -o $WAN_INTERFACE -j MASQUERADE
COMMIT
EOF
        
        # Reload UFW
        ufw --force reload
        
        success "UFW configured for OpenVPN"
    else
        log "UFW not active, using iptables directly..."
        
        # Configure iptables rules directly
        iptables -t nat -A POSTROUTING -s $VPN_NETWORK/24 -o $WAN_INTERFACE -j MASQUERADE
        iptables -A INPUT -i tun+ -j ACCEPT
        iptables -A FORWARD -i tun+ -j ACCEPT
        iptables -A FORWARD -i tun+ -o $WAN_INTERFACE -j ACCEPT
        iptables -A FORWARD -i $WAN_INTERFACE -o tun+ -j ACCEPT
        
        # Save iptables rules
        netfilter-persistent save > /dev/null
        
        success "iptables configured for OpenVPN"
    fi
}

# Configure fail2ban
configure_fail2ban() {
    if [ "$FAIL2BAN_ENABLED" = true ]; then
        log "Configuring fail2ban for OpenVPN..."
        
        cat > /etc/fail2ban/jail.d/openvpn.conf << EOF
[openvpn]
enabled = true
port = $VPN_PORT
protocol = $VPN_PROTO
filter = openvpn
logpath = $LOG_DIR/openvpn.log
maxretry = 3
bantime = 3600
findtime = 600
EOF
        
        cat > /etc/fail2ban/filter.d/openvpn.conf << 'EOF'
[Definition]
failregex = ^.*\[.*\] Peer Connection Initiated with \[AF_INET\]<HOST>:\d+$
            ^.*\[.*\] <HOST>:\d+ TLS Error: incoming packet authentication failed from \[AF_INET\]<HOST>:\d+$
            ^.*\[.*\] <HOST>:\d+ TLS Error: TLS key negotiation failed to occur within 60 seconds \(check your network connectivity\)
            ^.*\[.*\] <HOST>:\d+ TLS Error: TLS handshake failed
            ^.*\[.*\] <HOST>:\d+ SIGTERM\[soft,ping-exit\] received, process exiting
ignoreregex =
EOF
        
        systemctl enable fail2ban
        systemctl restart fail2ban
        
        success "Fail2ban configured"
    fi
}

# Create systemd service
create_systemd_service() {
    log "Creating systemd service..."
    
    cat > /etc/systemd/system/openvpn@server.service << EOF
[Unit]
Description=OpenVPN connection to %i
Documentation=man:openvpn(8)
After=network-online.target
Wants=network-online.target
PartOf=openvpn.service
ReloadPropagatedFrom=openvpn.service

[Service]
Type=notify
PrivateTmp=true
WorkingDirectory=$OPENVPN_DIR
ExecStart=/usr/sbin/openvpn --config /etc/openvpn/%i.conf --writepid /run/openvpn/%i.pid
PIDFile=/run/openvpn/%i.pid
KillMode=mixed
Restart=always
RestartSec=5
TimeoutStartSec=0
LimitNOFILE=1048576
LimitNPROC=1048576
TasksMax=infinity

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    success "Systemd service created"
}

# Create user management script
create_user_management() {
    log "Creating user management script..."
    
    cat > /usr/local/bin/openvpn-user-mgmt << 'EOF'
#!/bin/bash

# OpenVPN User Management Script - Username/Password Authentication
# Usage: openvpn-user-mgmt [add|remove|list|change-password] [username]

set -euo pipefail

OPENVPN_DIR="/etc/openvpn"
AUTH_FILE="$OPENVPN_DIR/auth/users"
CLIENT_DIR="$OPENVPN_DIR/clients"
SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' 2>/dev/null || echo "YOUR_SERVER_IP")
VPN_PORT="1194"
VPN_PROTO="udp"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

show_usage() {
    echo "OpenVPN User Management - Username/Password Authentication"
    echo "Usage: $0 [add|remove|list|change-password] [username]"
    echo ""
    echo "Commands:"
    echo "  add <username>           - Add a new OpenVPN user"
    echo "  remove <username>        - Remove an OpenVPN user"
    echo "  list                     - List all OpenVPN users"
    echo "  change-password <username> - Change user password"
    echo ""
    echo "Examples:"
    echo "  $0 add john"
    echo "  $0 remove john"
    echo "  $0 list"
    echo "  $0 change-password john"
}

add_user() {
    local username="$1"
    
    if [ -z "$username" ]; then
        error "Username is required"
        exit 1
    fi
    
    # Check if user already exists
    if grep -q "^$username:" "$AUTH_FILE" 2>/dev/null; then
        error "User $username already exists"
        exit 1
    fi
    
    log "Adding user: $username"
    
    # Prompt for password
    echo -n "Enter password for $username: "
    read -s password
    echo
    
    if [ -z "$password" ]; then
        error "Password cannot be empty"
        exit 1
    fi
    
    # Hash password
    hashed_password=$(echo "$password" | openssl passwd -1 -stdin)
    
    # Add user to auth file
    echo "$username:$hashed_password" >> "$AUTH_FILE"
    
    # Create client configuration
    create_client_config "$username"
    
    success "User $username added successfully"
    echo "Client configuration saved to: $CLIENT_DIR/$username.ovpn"
}

remove_user() {
    local username="$1"
    
    if [ -z "$username" ]; then
        error "Username is required"
        exit 1
    fi
    
    if ! grep -q "^$username:" "$AUTH_FILE" 2>/dev/null; then
        error "User $username does not exist"
        exit 1
    fi
    
    log "Removing user: $username"
    
    # Remove user from auth file
    sed -i "/^$username:/d" "$AUTH_FILE"
    
    # Remove client configuration
    rm -f "$CLIENT_DIR/$username.ovpn"
    
    success "User $username removed successfully"
}

list_users() {
    log "Listing OpenVPN users..."
    
    if [ ! -f "$AUTH_FILE" ] || [ ! -s "$AUTH_FILE" ]; then
        echo "No users found"
        return
    fi
    
    echo "OpenVPN Users:"
    echo "=============="
    
    while IFS=: read -r username _; do
        if [ -f "$CLIENT_DIR/$username.ovpn" ]; then
            echo "✅ $username (Active)"
        else
            echo "❌ $username (Config missing)"
        fi
    done < "$AUTH_FILE"
}

change_password() {
    local username="$1"
    
    if [ -z "$username" ]; then
        error "Username is required"
        exit 1
    fi
    
    if ! grep -q "^$username:" "$AUTH_FILE" 2>/dev/null; then
        error "User $username does not exist"
        exit 1
    fi
    
    log "Changing password for user: $username"
    
    # Prompt for new password
    echo -n "Enter new password for $username: "
    read -s password
    echo
    
    if [ -z "$password" ]; then
        error "Password cannot be empty"
        exit 1
    fi
    
    # Hash new password
    hashed_password=$(echo "$password" | openssl passwd -1 -stdin)
    
    # Update password in auth file
    sed -i "s/^$username:.*/$username:$hashed_password/" "$AUTH_FILE"
    
    success "Password changed for $username"
}

create_client_config() {
    local username="$1"
    
    cat > "$CLIENT_DIR/$username.ovpn" << CLIENT_EOF
client
dev tun
proto $VPN_PROTO
remote $SERVER_IP $VPN_PORT
resolv-retry infinite
nobind
persist-key
persist-tun
cipher AES-256-GCM
auth SHA256
tls-version-min 1.2
tls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256
data-ciphers AES-256-GCM:AES-128-GCM
data-ciphers-fallback AES-256-CBC
verb 3
auth-user-pass

<ca>
$(cat $OPENVPN_DIR/ca.crt)
</ca>

<tls-crypt>
$(cat $OPENVPN_DIR/ta.key)
</tls-crypt>
CLIENT_EOF
    
    chmod 600 "$CLIENT_DIR/$username.ovpn"
}

# Main script logic
case "$1" in
    add)
        add_user "$2"
        ;;
    remove)
        remove_user "$2"
        ;;
    list)
        list_users
        ;;
    change-password)
        change_password "$2"
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
EOF
    
    chmod +x /usr/local/bin/openvpn-user-mgmt
    success "User management script created"
}

# Start and enable services
start_services() {
    log "Starting OpenVPN service..."
    
    # Create ipp.txt file
    touch "$OPENVPN_DIR/ipp.txt"
    chmod 644 "$OPENVPN_DIR/ipp.txt"
    
    # Test configuration
    log "Testing OpenVPN configuration..."
    if ! openvpn --config "$OPENVPN_DIR/server.conf" --test-crypto; then
        error "OpenVPN configuration test failed"
        exit 1
    fi
    
    # Start OpenVPN
    systemctl enable openvpn@server.service
    systemctl start openvpn@server.service
    
    sleep 3
    
    if systemctl is-active --quiet openvpn@server.service; then
        success "OpenVPN service started successfully"
    else
        error "Failed to start OpenVPN service"
        systemctl status openvpn@server.service
        exit 1
    fi
}

# Display final information
show_final_info() {
    log "OpenVPN server setup completed!"
    echo ""
    echo "🔧 Server Information:"
    echo "====================="
    echo "Server IP: $SERVER_IP"
    echo "VPN Port: $VPN_PORT"
    echo "VPN Protocol: $VPN_PROTO"
    echo "VPN Network: $VPN_NETWORK/$VPN_NETMASK"
    echo "Max Clients: $MAX_CLIENTS"
    echo ""
    echo "📁 Important Files:"
    echo "==================="
    echo "Server Config: $OPENVPN_DIR/server.conf"
    echo "Client Configs: $CLIENT_DIR/"
    echo "User Database: $OPENVPN_DIR/auth/users"
    echo "Logs: $LOG_DIR/"
    echo ""
    echo "🛠️  Management Commands:"
    echo "======================="
    echo "Add user:         openvpn-user-mgmt add <username>"
    echo "Remove user:      openvpn-user-mgmt remove <username>"
    echo "List users:       openvpn-user-mgmt list"
    echo "Change password:  openvpn-user-mgmt change-password <username>"
    echo ""
    echo "📊 Service Commands:"
    echo "==================="
    echo "Status:           systemctl status openvpn@server.service"
    echo "Restart:          systemctl restart openvpn@server.service"
    echo "Logs:             tail -f $LOG_DIR/openvpn.log"
    echo "Auth Logs:        tail -f $LOG_DIR/auth.log"
    echo ""
    echo "🔒 Security Features:"
    echo "===================="
    echo "• Username/Password authentication only"
    echo "• Modern encryption (AES-256-GCM)"
    echo "• TLS 1.2+ required"
    echo "• Fail2ban protection"
    echo "• Rate limiting"
    echo "• Certificate Revocation List (CRL)"
    echo ""
    echo "✅ Setup complete! Add your first user with: openvpn-user-mgmt add <username>"
}

# Main execution
main() {
    log "Starting OpenVPN server setup (v$VERSION)..."
    log "Using username/password authentication only"
    
    check_root
    check_system
    update_system
    install_packages
    create_directories
    setup_easyrsa
    generate_server_config
    create_auth_script
    copy_certificates
    create_systemd_service
    enable_ip_forwarding
    configure_firewall
    configure_fail2ban
    create_user_management
    start_services
    show_final_info
}

# Run main function
main "$@"
