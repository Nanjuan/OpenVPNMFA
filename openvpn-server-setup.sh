#!/bin/bash

# OpenVPN Server Setup Script for Ubuntu
# This script installs and configures OpenVPN with best security practices
# Includes user management functionality (add, remove, renew users)

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
OPENVPN_DIR="/etc/openvpn"
EASYRSA_DIR="/etc/openvpn/easy-rsa"
SERVER_NAME="server"
CLIENT_DIR="/etc/openvpn/clients"
LOG_DIR="/var/log/openvpn"
BACKUP_DIR="/etc/openvpn/backup"

# Network configuration
VPN_NETWORK="10.8.0.0"
VPN_NETMASK="255.255.255.0"
VPN_PORT="1194"
VPN_PROTOCOL="udp"

# Security settings
KEY_SIZE="4096"
CURVE="secp384r1"
CIPHER="AES-256-GCM"
AUTH="SHA512"
TLS_VERSION="1.2"

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
}

# Update system packages
update_system() {
    log "Updating system packages..."
    apt update && apt upgrade -y
    apt install -y curl wget gnupg2 software-properties-common
}

# Install OpenVPN and dependencies
install_openvpn() {
    log "Installing OpenVPN and dependencies..."
    
    # Add OpenVPN repository for latest version
    wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
    echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -cs) main" > /etc/apt/sources.list.d/openvpn.list
    
    apt update
    apt install -y openvpn easy-rsa ufw iptables-persistent
    
    # Install additional security tools
    apt install -y fail2ban unattended-upgrades
    
    log "OpenVPN installation completed"
}

# Setup EasyRSA Certificate Authority
setup_easyrsa() {
    log "Setting up EasyRSA Certificate Authority..."
    
    # Remove existing EasyRSA if present
    rm -rf $EASYRSA_DIR
    
    # Copy EasyRSA to OpenVPN directory
    cp -r /usr/share/easy-rsa $EASYRSA_DIR
    
    # Navigate to EasyRSA directory
    cd $EASYRSA_DIR
    
    # Initialize PKI
    ./easyrsa init-pki
    
    # Create CA with secure settings
    ./easyrsa --batch --req-cn="OpenVPN-CA" build-ca nopass
    
    # Generate Diffie-Hellman parameters
    ./easyrsa gen-dh
    
    # Generate TLS-Crypt key for additional security
    openvpn --genkey --secret pki/ta.key
    
    # Generate server certificate
    ./easyrsa --batch --req-cn="OpenVPN-Server" build-server-full $SERVER_NAME nopass
    
    log "EasyRSA setup completed"
}

# Configure OpenVPN server
configure_openvpn() {
    log "Configuring OpenVPN server..."
    
    # Create server configuration file
    cat > $OPENVPN_DIR/$SERVER_NAME.conf << EOF
# OpenVPN Server Configuration
# Generated by openvpn-server-setup.sh

# Network settings
port $VPN_PORT
proto $VPN_PROTOCOL
dev tun

# Certificate and key files
ca $EASYRSA_DIR/pki/ca.crt
cert $EASYRSA_DIR/pki/issued/$SERVER_NAME.crt
key $EASYRSA_DIR/pki/private/$SERVER_NAME.key
dh $EASYRSA_DIR/pki/dh.pem
tls-crypt $EASYRSA_DIR/pki/ta.key

# Network topology
server $VPN_NETWORK $VPN_NETMASK
ifconfig-pool-persist ipp.txt

# Client configuration
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"

# Security settings
cipher $CIPHER
auth $AUTH
tls-version-min $TLS_VERSION
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384

# Perfect Forward Secrecy
tls-crypt $EASYRSA_DIR/pki/ta.key

# Additional security
remote-cert-tls client
tls-auth $EASYRSA_DIR/pki/ta.key 0
key-direction 0

# Compression
comp-lzo

# Logging
log-append $LOG_DIR/openvpn.log
verb 3
mute 20

# Status file
status $LOG_DIR/openvpn-status.log
status-version 2

# Client timeout settings
keepalive 10 120

# Security enhancements
explicit-exit-notify 1
tls-server
tls-version-min 1.2

# Disable weak protocols
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384

# Additional hardening
tls-version-min 1.2
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384
EOF

    # Create log directory
    mkdir -p $LOG_DIR
    chown openvpn:openvpn $LOG_DIR
    
    # Create client directory
    mkdir -p $CLIENT_DIR
    chown openvpn:openvpn $CLIENT_DIR
    
    # Create backup directory
    mkdir -p $BACKUP_DIR
    chown openvpn:openvpn $BACKUP_DIR
    
    log "OpenVPN server configuration completed"
}

# Configure firewall
configure_firewall() {
    log "Configuring firewall rules..."
    
    # Enable UFW
    ufw --force enable
    
    # Allow SSH (important!)
    ufw allow ssh
    
    # Allow OpenVPN port
    ufw allow $VPN_PORT/$VPN_PROTOCOL
    
    # Configure IP forwarding
    echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
    sysctl -p
    
    # Configure NAT for VPN traffic
    iptables -t nat -A POSTROUTING -s $VPN_NETWORK/24 -o $(ip route | grep default | awk '{print $5}') -j MASQUERADE
    
    # Save iptables rules
    iptables-save > /etc/iptables/rules.v4
    
    log "Firewall configuration completed"
}

# Configure systemd service
configure_systemd() {
    log "Configuring systemd service..."
    
    # Enable and start OpenVPN service
    systemctl enable openvpn@$SERVER_NAME
    systemctl start openvpn@$SERVER_NAME
    
    # Create status check script
    cat > /usr/local/bin/openvpn-status << 'EOF'
#!/bin/bash
systemctl status openvpn@server
echo "---"
echo "Connected clients:"
cat /var/log/openvpn/openvpn-status.log | grep "CLIENT_LIST" | wc -l
EOF
    
    chmod +x /usr/local/bin/openvpn-status
    
    log "Systemd service configured"
}

# User management functions
add_user() {
    local username=$1
    
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username already exists"
        return 1
    fi
    
    log "Adding user: $username"
    
    cd $EASYRSA_DIR
    ./easyrsa --batch --req-cn="$username" build-client-full "$username" nopass
    
    # Generate client configuration
    generate_client_config "$username"
    
    log "User $username added successfully"
    info "Client configuration saved to: $CLIENT_DIR/$username.ovpn"
}

remove_user() {
    local username=$1
    
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ ! -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username does not exist"
        return 1
    fi
    
    log "Removing user: $username"
    
    cd $EASYRSA_DIR
    ./easyrsa revoke "$username"
    ./easyrsa gen-crl
    
    # Remove client files
    rm -f "$CLIENT_DIR/$username.ovpn"
    rm -f "$CLIENT_DIR/$username.crt"
    rm -f "$CLIENT_DIR/$username.key"
    
    # Copy CRL to OpenVPN directory
    cp pki/crl.pem $OPENVPN_DIR/
    
    # Restart OpenVPN to load new CRL
    systemctl restart openvpn@$SERVER_NAME
    
    log "User $username removed successfully"
}

renew_user() {
    local username=$1
    
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ ! -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username does not exist"
        return 1
    fi
    
    log "Renewing certificate for user: $username"
    
    # Revoke old certificate
    cd $EASYRSA_DIR
    ./easyrsa revoke "$username"
    
    # Generate new certificate
    ./easyrsa --batch --req-cn="$username" build-client-full "$username" nopass
    
    # Generate new client configuration
    generate_client_config "$username"
    
    # Update CRL
    ./easyrsa gen-crl
    cp pki/crl.pem $OPENVPN_DIR/
    
    # Restart OpenVPN
    systemctl restart openvpn@$SERVER_NAME
    
    log "Certificate renewed for user: $username"
}

generate_client_config() {
    local username=$1
    local server_ip=$(curl -s ifconfig.me)
    
    cat > "$CLIENT_DIR/$username.ovpn" << EOF
client
dev tun
proto $VPN_PROTOCOL
remote $server_ip $VPN_PORT
resolv-retry infinite
nobind
persist-key
persist-tun
cipher $CIPHER
auth $AUTH
verb 3
mute 20

<ca>
$(cat $EASYRSA_DIR/pki/ca.crt)
</ca>

<cert>
$(cat $EASYRSA_DIR/pki/issued/$username.crt)
</cert>

<key>
$(cat $EASYRSA_DIR/pki/private/$username.key)
</key>

<tls-crypt>
$(cat $EASYRSA_DIR/pki/ta.key)
</tls-crypt>
EOF

    chmod 600 "$CLIENT_DIR/$username.ovpn"
}

# List users
list_users() {
    log "Listing all users:"
    cd $EASYRSA_DIR
    if [[ -d "pki/issued" ]]; then
        ls -1 pki/issued/*.crt 2>/dev/null | sed 's/.*\///' | sed 's/\.crt$//' | grep -v "$SERVER_NAME" || echo "No users found"
    else
        echo "No users found"
    fi
}

# Backup configuration
backup_config() {
    local backup_name="openvpn-backup-$(date +%Y%m%d-%H%M%S)"
    local backup_path="$BACKUP_DIR/$backup_name"
    
    log "Creating backup: $backup_name"
    
    mkdir -p "$backup_path"
    
    # Backup EasyRSA PKI
    cp -r $EASYRSA_DIR/pki "$backup_path/"
    
    # Backup OpenVPN configuration
    cp $OPENVPN_DIR/$SERVER_NAME.conf "$backup_path/"
    
    # Backup client configurations
    cp -r $CLIENT_DIR "$backup_path/"
    
    # Create archive
    tar -czf "$backup_path.tar.gz" -C "$BACKUP_DIR" "$backup_name"
    rm -rf "$backup_path"
    
    log "Backup created: $backup_path.tar.gz"
}

# Main installation function
install_openvpn_server() {
    log "Starting OpenVPN server installation..."
    
    check_root
    update_system
    install_openvpn
    setup_easyrsa
    configure_openvpn
    configure_firewall
    configure_systemd
    
    # Create management script
    create_management_script
    
    log "OpenVPN server installation completed successfully!"
    info "Server IP: $(curl -s ifconfig.me)"
    info "VPN Port: $VPN_PORT"
    info "VPN Network: $VPN_NETWORK/24"
    info "Management script: /usr/local/bin/openvpn-manage"
    
    warning "Don't forget to:"
    warning "1. Configure your firewall to allow traffic on port $VPN_PORT"
    warning "2. Test the VPN connection"
    warning "3. Add your first user with: openvpn-manage add <username>"
}

# Create management script
create_management_script() {
    cat > /usr/local/bin/openvpn-manage << 'EOF'
#!/bin/bash

# OpenVPN Management Script
# Usage: openvpn-manage [add|remove|renew|list|status|backup] [username]

set -euo pipefail

OPENVPN_DIR="/etc/openvpn"
EASYRSA_DIR="/etc/openvpn/easy-rsa"
CLIENT_DIR="/etc/openvpn/clients"
SERVER_NAME="server"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}" >&2; }
warning() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }

show_usage() {
    echo "OpenVPN Management Script"
    echo ""
    echo "Usage: $0 [command] [username]"
    echo ""
    echo "Commands:"
    echo "  add <username>     - Add a new VPN user"
    echo "  remove <username>  - Remove a VPN user"
    echo "  renew <username>   - Renew user certificate"
    echo "  list               - List all users"
    echo "  status             - Show server status"
    echo "  backup             - Create configuration backup"
    echo "  restart            - Restart OpenVPN service"
    echo ""
}

add_user() {
    local username=$1
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username already exists"
        return 1
    fi
    
    log "Adding user: $username"
    cd $EASYRSA_DIR
    ./easyrsa --batch --req-cn="$username" build-client-full "$username" nopass
    
    # Generate client configuration
    local server_ip=$(curl -s ifconfig.me)
    cat > "$CLIENT_DIR/$username.ovpn" << CLIENT_EOF
client
dev tun
proto udp
remote $server_ip 1194
resolv-retry infinite
nobind
persist-key
persist-tun
cipher AES-256-GCM
auth SHA512
verb 3
mute 20

<ca>
$(cat $EASYRSA_DIR/pki/ca.crt)
</ca>

<cert>
$(cat $EASYRSA_DIR/pki/issued/$username.crt)
</cert>

<key>
$(cat $EASYRSA_DIR/pki/private/$username.key)
</key>

<tls-crypt>
$(cat $EASYRSA_DIR/pki/ta.key)
</tls-crypt>
CLIENT_EOF

    chmod 600 "$CLIENT_DIR/$username.ovpn"
    log "User $username added successfully"
    info "Client configuration: $CLIENT_DIR/$username.ovpn"
}

remove_user() {
    local username=$1
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ ! -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username does not exist"
        return 1
    fi
    
    log "Removing user: $username"
    cd $EASYRSA_DIR
    ./easyrsa revoke "$username"
    ./easyrsa gen-crl
    cp pki/crl.pem $OPENVPN_DIR/
    rm -f "$CLIENT_DIR/$username.ovpn"
    systemctl restart openvpn@$SERVER_NAME
    log "User $username removed successfully"
}

renew_user() {
    local username=$1
    if [[ -z "$username" ]]; then
        error "Username is required"
        return 1
    fi
    
    if [[ ! -f "$EASYRSA_DIR/pki/issued/$username.crt" ]]; then
        warning "User $username does not exist"
        return 1
    fi
    
    log "Renewing certificate for user: $username"
    cd $EASYRSA_DIR
    ./easyrsa revoke "$username"
    ./easyrsa --batch --req-cn="$username" build-client-full "$username" nopass
    ./easyrsa gen-crl
    cp pki/crl.pem $OPENVPN_DIR/
    systemctl restart openvpn@$SERVER_NAME
    log "Certificate renewed for user: $username"
}

list_users() {
    log "VPN Users:"
    cd $EASYRSA_DIR
    if [[ -d "pki/issued" ]]; then
        ls -1 pki/issued/*.crt 2>/dev/null | sed 's/.*\///' | sed 's/\.crt$//' | grep -v "$SERVER_NAME" || echo "No users found"
    else
        echo "No users found"
    fi
}

show_status() {
    log "OpenVPN Server Status:"
    systemctl status openvpn@$SERVER_NAME --no-pager
    echo ""
    log "Connected clients:"
    if [[ -f "/var/log/openvpn/openvpn-status.log" ]]; then
        cat /var/log/openvpn/openvpn-status.log | grep "CLIENT_LIST" | wc -l
    else
        echo "0"
    fi
}

backup_config() {
    local backup_name="openvpn-backup-$(date +%Y%m%d-%H%M%S)"
    local backup_path="/etc/openvpn/backup/$backup_name"
    
    log "Creating backup: $backup_name"
    mkdir -p "$backup_path"
    cp -r $EASYRSA_DIR/pki "$backup_path/"
    cp $OPENVPN_DIR/$SERVER_NAME.conf "$backup_path/"
    cp -r $CLIENT_DIR "$backup_path/"
    tar -czf "$backup_path.tar.gz" -C "/etc/openvpn/backup" "$backup_name"
    rm -rf "$backup_path"
    log "Backup created: $backup_path.tar.gz"
}

# Main script logic
case "${1:-}" in
    add)
        add_user "$2"
        ;;
    remove)
        remove_user "$2"
        ;;
    renew)
        renew_user "$2"
        ;;
    list)
        list_users
        ;;
    status)
        show_status
        ;;
    backup)
        backup_config
        ;;
    restart)
        systemctl restart openvpn@$SERVER_NAME
        log "OpenVPN service restarted"
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
EOF

    chmod +x /usr/local/bin/openvpn-manage
}

# Main script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-install}" in
        install)
            install_openvpn_server
            ;;
        add)
            add_user "$2"
            ;;
        remove)
            remove_user "$2"
            ;;
        renew)
            renew_user "$2"
            ;;
        list)
            list_users
            ;;
        backup)
            backup_config
            ;;
        *)
            echo "Usage: $0 [install|add|remove|renew|list|backup] [username]"
            echo ""
            echo "Commands:"
            echo "  install         - Install and configure OpenVPN server"
            echo "  add <username>  - Add a new VPN user"
            echo "  remove <username> - Remove a VPN user"
            echo "  renew <username>  - Renew user certificate"
            echo "  list            - List all users"
            echo "  backup          - Create configuration backup"
            exit 1
            ;;
    esac
fi
